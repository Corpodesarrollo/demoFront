//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class TS_ACO {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param idAnio (optional) 
     * @param idMes (optional) 
     * @param activas (optional) 
     * @param offSet (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    consultarReporteUnificadoAT(idAnio: number | undefined, idMes: number | undefined, activas: boolean | undefined, offSet: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<ConsultaUnificadaATResponse[]> {
        let url_ = this.baseUrl + "/ConsultarReporteUnificadoAT?";
        if (idAnio === null)
            throw new Error("The parameter 'idAnio' cannot be null.");
        else if (idAnio !== undefined)
            url_ += "IdAnio=" + encodeURIComponent("" + idAnio) + "&";
        if (idMes === null)
            throw new Error("The parameter 'idMes' cannot be null.");
        else if (idMes !== undefined)
            url_ += "IdMes=" + encodeURIComponent("" + idMes) + "&";
        if (activas === null)
            throw new Error("The parameter 'activas' cannot be null.");
        else if (activas !== undefined)
            url_ += "Activas=" + encodeURIComponent("" + activas) + "&";
        if (offSet === null)
            throw new Error("The parameter 'offSet' cannot be null.");
        else if (offSet !== undefined)
            url_ += "OffSet=" + encodeURIComponent("" + offSet) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processConsultarReporteUnificadoAT(_response);
        });
    }

    protected processConsultarReporteUnificadoAT(response: AxiosResponse): Promise<ConsultaUnificadaATResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ConsultaUnificadaATResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ConsultaUnificadaATResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConsultaUnificadaATResponse[]>(null as any);
    }

    /**
     * @param idAnio (optional) 
     * @param idMes (optional) 
     * @param activas (optional) 
     * @return Success
     */
    descargarConsultarReporteUnificadoAT(idAnio: number | undefined, idMes: number | undefined, activas: boolean | undefined, cancelToken?: CancelToken | undefined): Promise<ReporteDescargaResponse> {
        let url_ = this.baseUrl + "/DescargarConsultarReporteUnificadoAT?";
        if (idAnio === null)
            throw new Error("The parameter 'idAnio' cannot be null.");
        else if (idAnio !== undefined)
            url_ += "IdAnio=" + encodeURIComponent("" + idAnio) + "&";
        if (idMes === null)
            throw new Error("The parameter 'idMes' cannot be null.");
        else if (idMes !== undefined)
            url_ += "IdMes=" + encodeURIComponent("" + idMes) + "&";
        if (activas === null)
            throw new Error("The parameter 'activas' cannot be null.");
        else if (activas !== undefined)
            url_ += "Activas=" + encodeURIComponent("" + activas) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDescargarConsultarReporteUnificadoAT(_response);
        });
    }

    protected processDescargarConsultarReporteUnificadoAT(response: AxiosResponse): Promise<ReporteDescargaResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ReporteDescargaResponse.fromJS(resultData200);
            return Promise.resolve<ReporteDescargaResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ReporteDescargaResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    hi(body: Greetings_SayHi_Request | undefined, cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Hi";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHi(_response);
        });
    }

    protected processHi(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return Success
     */
    mesesCorte( cancelToken?: CancelToken | undefined): Promise<MesesCorteResponse[]> {
        let url_ = this.baseUrl + "/MesesCorte";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMesesCorte(_response);
        });
    }

    protected processMesesCorte(response: AxiosResponse): Promise<MesesCorteResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MesesCorteResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<MesesCorteResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MesesCorteResponse[]>(null as any);
    }

    /**
     * @return Success
     */
    aniosCorte( cancelToken?: CancelToken | undefined): Promise<AniosCorteResponse[]> {
        let url_ = this.baseUrl + "/AniosCorte";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAniosCorte(_response);
        });
    }

    protected processAniosCorte(response: AxiosResponse): Promise<AniosCorteResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AniosCorteResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<AniosCorteResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AniosCorteResponse[]>(null as any);
    }

    /**
     * @param prefixtext (optional) 
     * @param count (optional) 
     * @return Success
     */
    listaEmpresas(prefixtext: string | undefined, count: number | undefined, cancelToken?: CancelToken | undefined): Promise<EmpresaResponse[]> {
        let url_ = this.baseUrl + "/ListaEmpresas?";
        if (prefixtext === null)
            throw new Error("The parameter 'prefixtext' cannot be null.");
        else if (prefixtext !== undefined)
            url_ += "prefixtext=" + encodeURIComponent("" + prefixtext) + "&";
        if (count === null)
            throw new Error("The parameter 'count' cannot be null.");
        else if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListaEmpresas(_response);
        });
    }

    protected processListaEmpresas(response: AxiosResponse): Promise<EmpresaResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EmpresaResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<EmpresaResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EmpresaResponse[]>(null as any);
    }

    /**
     * @param idEmpresa (optional) 
     * @param idAnio (optional) 
     * @param idMes (optional) 
     * @param cruce (optional) 
     * @return Success
     */
    consultarReporte(idEmpresa: number | undefined, idAnio: number | undefined, idMes: number | undefined, cruce: boolean | undefined, cancelToken?: CancelToken | undefined): Promise<ReporteIBCResumen1Response[]> {
        let url_ = this.baseUrl + "/ConsultarReporte?";
        if (idEmpresa === null)
            throw new Error("The parameter 'idEmpresa' cannot be null.");
        else if (idEmpresa !== undefined)
            url_ += "IdEmpresa=" + encodeURIComponent("" + idEmpresa) + "&";
        if (idAnio === null)
            throw new Error("The parameter 'idAnio' cannot be null.");
        else if (idAnio !== undefined)
            url_ += "IdAnio=" + encodeURIComponent("" + idAnio) + "&";
        if (idMes === null)
            throw new Error("The parameter 'idMes' cannot be null.");
        else if (idMes !== undefined)
            url_ += "IdMes=" + encodeURIComponent("" + idMes) + "&";
        if (cruce === null)
            throw new Error("The parameter 'cruce' cannot be null.");
        else if (cruce !== undefined)
            url_ += "cruce=" + encodeURIComponent("" + cruce) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processConsultarReporte(_response);
        });
    }

    protected processConsultarReporte(response: AxiosResponse): Promise<ReporteIBCResumen1Response[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReporteIBCResumen1Response.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ReporteIBCResumen1Response[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ReporteIBCResumen1Response[]>(null as any);
    }

    /**
     * @param idEmpresa (optional) 
     * @param idAnio (optional) 
     * @param idMes (optional) 
     * @param cruce (optional) 
     * @return Success
     */
    descargarReporte(idEmpresa: number | undefined, idAnio: number | undefined, idMes: number | undefined, cruce: boolean | undefined, cancelToken?: CancelToken | undefined): Promise<ReporteDescargaResponse> {
        let url_ = this.baseUrl + "/DescargarReporte?";
        if (idEmpresa === null)
            throw new Error("The parameter 'idEmpresa' cannot be null.");
        else if (idEmpresa !== undefined)
            url_ += "IdEmpresa=" + encodeURIComponent("" + idEmpresa) + "&";
        if (idAnio === null)
            throw new Error("The parameter 'idAnio' cannot be null.");
        else if (idAnio !== undefined)
            url_ += "IdAnio=" + encodeURIComponent("" + idAnio) + "&";
        if (idMes === null)
            throw new Error("The parameter 'idMes' cannot be null.");
        else if (idMes !== undefined)
            url_ += "IdMes=" + encodeURIComponent("" + idMes) + "&";
        if (cruce === null)
            throw new Error("The parameter 'cruce' cannot be null.");
        else if (cruce !== undefined)
            url_ += "cruce=" + encodeURIComponent("" + cruce) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDescargarReporte(_response);
        });
    }

    protected processDescargarReporte(response: AxiosResponse): Promise<ReporteDescargaResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ReporteDescargaResponse.fromJS(resultData200);
            return Promise.resolve<ReporteDescargaResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ReporteDescargaResponse>(null as any);
    }

    /**
     * @param idAnio (optional) 
     * @param idMes (optional) 
     * @param offSet (optional) 
     * @param pageSize (optional) 
     * @return Success
     */
    consultarConsolidadoReporte(idAnio: number | undefined, idMes: number | undefined, offSet: number | undefined, pageSize: number | undefined, cancelToken?: CancelToken | undefined): Promise<ReporteConsolidadoResponse[]> {
        let url_ = this.baseUrl + "/ConsultarConsolidadoReporte?";
        if (idAnio === null)
            throw new Error("The parameter 'idAnio' cannot be null.");
        else if (idAnio !== undefined)
            url_ += "IdAnio=" + encodeURIComponent("" + idAnio) + "&";
        if (idMes === null)
            throw new Error("The parameter 'idMes' cannot be null.");
        else if (idMes !== undefined)
            url_ += "IdMes=" + encodeURIComponent("" + idMes) + "&";
        if (offSet === null)
            throw new Error("The parameter 'offSet' cannot be null.");
        else if (offSet !== undefined)
            url_ += "OffSet=" + encodeURIComponent("" + offSet) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processConsultarConsolidadoReporte(_response);
        });
    }

    protected processConsultarConsolidadoReporte(response: AxiosResponse): Promise<ReporteConsolidadoResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReporteConsolidadoResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ReporteConsolidadoResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ReporteConsolidadoResponse[]>(null as any);
    }

    /**
     * @param idAnio (optional) 
     * @param idMes (optional) 
     * @return Success
     */
    descargarConsolidadoReporte(idAnio: number | undefined, idMes: number | undefined, cancelToken?: CancelToken | undefined): Promise<ReporteDescargaResponse> {
        let url_ = this.baseUrl + "/DescargarConsolidadoReporte?";
        if (idAnio === null)
            throw new Error("The parameter 'idAnio' cannot be null.");
        else if (idAnio !== undefined)
            url_ += "IdAnio=" + encodeURIComponent("" + idAnio) + "&";
        if (idMes === null)
            throw new Error("The parameter 'idMes' cannot be null.");
        else if (idMes !== undefined)
            url_ += "IdMes=" + encodeURIComponent("" + idMes) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDescargarConsolidadoReporte(_response);
        });
    }

    protected processDescargarConsolidadoReporte(response: AxiosResponse): Promise<ReporteDescargaResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ReporteDescargaResponse.fromJS(resultData200);
            return Promise.resolve<ReporteDescargaResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ReporteDescargaResponse>(null as any);
    }

    /**
     * @return Success
     */
    consultarEntidadesAutorizadas( cancelToken?: CancelToken | undefined): Promise<EntidadAutorizadaResponse[]> {
        let url_ = this.baseUrl + "/ConsultarEntidadesAutorizadas";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processConsultarEntidadesAutorizadas(_response);
        });
    }

    protected processConsultarEntidadesAutorizadas(response: AxiosResponse): Promise<EntidadAutorizadaResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EntidadAutorizadaResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<EntidadAutorizadaResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EntidadAutorizadaResponse[]>(null as any);
    }

    /**
     * @param tipoIdEntidad (optional) 
     * @param nroIdEntidad (optional) 
     * @return Success
     */
    consultarTrazaEntidadAutorizada(tipoIdEntidad: string | undefined, nroIdEntidad: number | undefined, cancelToken?: CancelToken | undefined): Promise<EntidadAutorizadaResponse[]> {
        let url_ = this.baseUrl + "/ConsultarTrazaEntidadAutorizada?";
        if (tipoIdEntidad === null)
            throw new Error("The parameter 'tipoIdEntidad' cannot be null.");
        else if (tipoIdEntidad !== undefined)
            url_ += "tipoIdEntidad=" + encodeURIComponent("" + tipoIdEntidad) + "&";
        if (nroIdEntidad === null)
            throw new Error("The parameter 'nroIdEntidad' cannot be null.");
        else if (nroIdEntidad !== undefined)
            url_ += "nroIdEntidad=" + encodeURIComponent("" + nroIdEntidad) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processConsultarTrazaEntidadAutorizada(_response);
        });
    }

    protected processConsultarTrazaEntidadAutorizada(response: AxiosResponse): Promise<EntidadAutorizadaResponse[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EntidadAutorizadaResponse.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<EntidadAutorizadaResponse[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EntidadAutorizadaResponse[]>(null as any);
    }
}

export class AniosCorteResponse implements IAniosCorteResponse {
    idAnio?: number;
    nombreAnio?: string | undefined;

    constructor(data?: IAniosCorteResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idAnio = _data["IdAnio"];
            this.nombreAnio = _data["NombreAnio"];
        }
    }

    static fromJS(data: any): AniosCorteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AniosCorteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IdAnio"] = this.idAnio;
        data["NombreAnio"] = this.nombreAnio;
        return data;
    }
}

export interface IAniosCorteResponse {
    idAnio?: number;
    nombreAnio?: string | undefined;
}

export class ConsultaUnificadaATResponse implements IConsultaUnificadaATResponse {
    tipoIdEntidad?: string | undefined;
    nroIdEntidad?: number;
    nombreEntidad?: string | undefined;
    departamento?: string | undefined;
    municipio?: string | undefined;
    direccion?: string | undefined;
    telefono?: string | undefined;
    correo?: string | undefined;
    representanteLegal?: string | undefined;
    resolucionHabilitacion?: string | undefined;
    fechaHabilitacion?: string | undefined;
    resolucionCancelacion?: string | undefined;
    fechaCancelacion?: string | undefined;
    anexo240?: string | undefined;
    rACO240Reg?: number;
    rACO240OK?: number;
    iMAG240?: string | undefined;
    anexo245?: string | undefined;
    rACO245Reg?: number;
    rACO245OK?: number;
    iMAG245?: string | undefined;
    totalRegistros?: number;

    constructor(data?: IConsultaUnificadaATResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tipoIdEntidad = _data["TipoIdEntidad"];
            this.nroIdEntidad = _data["NroIdEntidad"];
            this.nombreEntidad = _data["NombreEntidad"];
            this.departamento = _data["Departamento"];
            this.municipio = _data["Municipio"];
            this.direccion = _data["Direccion"];
            this.telefono = _data["Telefono"];
            this.correo = _data["Correo"];
            this.representanteLegal = _data["RepresentanteLegal"];
            this.resolucionHabilitacion = _data["ResolucionHabilitacion"];
            this.fechaHabilitacion = _data["FechaHabilitacion"];
            this.resolucionCancelacion = _data["ResolucionCancelacion"];
            this.fechaCancelacion = _data["FechaCancelacion"];
            this.anexo240 = _data["Anexo240"];
            this.rACO240Reg = _data["RACO240Reg"];
            this.rACO240OK = _data["RACO240OK"];
            this.iMAG240 = _data["IMAG240"];
            this.anexo245 = _data["Anexo245"];
            this.rACO245Reg = _data["RACO245Reg"];
            this.rACO245OK = _data["RACO245OK"];
            this.iMAG245 = _data["IMAG245"];
            this.totalRegistros = _data["TotalRegistros"];
        }
    }

    static fromJS(data: any): ConsultaUnificadaATResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConsultaUnificadaATResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TipoIdEntidad"] = this.tipoIdEntidad;
        data["NroIdEntidad"] = this.nroIdEntidad;
        data["NombreEntidad"] = this.nombreEntidad;
        data["Departamento"] = this.departamento;
        data["Municipio"] = this.municipio;
        data["Direccion"] = this.direccion;
        data["Telefono"] = this.telefono;
        data["Correo"] = this.correo;
        data["RepresentanteLegal"] = this.representanteLegal;
        data["ResolucionHabilitacion"] = this.resolucionHabilitacion;
        data["FechaHabilitacion"] = this.fechaHabilitacion;
        data["ResolucionCancelacion"] = this.resolucionCancelacion;
        data["FechaCancelacion"] = this.fechaCancelacion;
        data["Anexo240"] = this.anexo240;
        data["RACO240Reg"] = this.rACO240Reg;
        data["RACO240OK"] = this.rACO240OK;
        data["IMAG240"] = this.iMAG240;
        data["Anexo245"] = this.anexo245;
        data["RACO245Reg"] = this.rACO245Reg;
        data["RACO245OK"] = this.rACO245OK;
        data["IMAG245"] = this.iMAG245;
        data["TotalRegistros"] = this.totalRegistros;
        return data;
    }
}

export interface IConsultaUnificadaATResponse {
    tipoIdEntidad?: string | undefined;
    nroIdEntidad?: number;
    nombreEntidad?: string | undefined;
    departamento?: string | undefined;
    municipio?: string | undefined;
    direccion?: string | undefined;
    telefono?: string | undefined;
    correo?: string | undefined;
    representanteLegal?: string | undefined;
    resolucionHabilitacion?: string | undefined;
    fechaHabilitacion?: string | undefined;
    resolucionCancelacion?: string | undefined;
    fechaCancelacion?: string | undefined;
    anexo240?: string | undefined;
    rACO240Reg?: number;
    rACO240OK?: number;
    iMAG240?: string | undefined;
    anexo245?: string | undefined;
    rACO245Reg?: number;
    rACO245OK?: number;
    iMAG245?: string | undefined;
    totalRegistros?: number;
}

export class EmpresaResponse implements IEmpresaResponse {
    idEmpresa?: number;
    nombreEmpresa?: string | undefined;

    constructor(data?: IEmpresaResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idEmpresa = _data["IdEmpresa"];
            this.nombreEmpresa = _data["NombreEmpresa"];
        }
    }

    static fromJS(data: any): EmpresaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EmpresaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IdEmpresa"] = this.idEmpresa;
        data["NombreEmpresa"] = this.nombreEmpresa;
        return data;
    }
}

export interface IEmpresaResponse {
    idEmpresa?: number;
    nombreEmpresa?: string | undefined;
}

export class EntidadAutorizadaResponse implements IEntidadAutorizadaResponse {
    tipoIdEntidad?: string | undefined;
    nroIdEntidad?: number;
    nombre?: string | undefined;
    resolucion?: string | undefined;
    fechaHabilitacion?: Date;
    fechaDeshabilitacion?: Date;
    usuarioCreacion?: string | undefined;
    fechaHoraCreacion?: Date;
    usuarioActualizacion?: string | undefined;
    fechaHoraActualizacion?: Date;
    observacion?: string | undefined;

    constructor(data?: IEntidadAutorizadaResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tipoIdEntidad = _data["TipoIdEntidad"];
            this.nroIdEntidad = _data["NroIdEntidad"];
            this.nombre = _data["Nombre"];
            this.resolucion = _data["Resolucion"];
            this.fechaHabilitacion = _data["FechaHabilitacion"] ? new Date(_data["FechaHabilitacion"].toString()) : <any>undefined;
            this.fechaDeshabilitacion = _data["FechaDeshabilitacion"] ? new Date(_data["FechaDeshabilitacion"].toString()) : <any>undefined;
            this.usuarioCreacion = _data["UsuarioCreacion"];
            this.fechaHoraCreacion = _data["FechaHoraCreacion"] ? new Date(_data["FechaHoraCreacion"].toString()) : <any>undefined;
            this.usuarioActualizacion = _data["UsuarioActualizacion"];
            this.fechaHoraActualizacion = _data["FechaHoraActualizacion"] ? new Date(_data["FechaHoraActualizacion"].toString()) : <any>undefined;
            this.observacion = _data["Observacion"];
        }
    }

    static fromJS(data: any): EntidadAutorizadaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EntidadAutorizadaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TipoIdEntidad"] = this.tipoIdEntidad;
        data["NroIdEntidad"] = this.nroIdEntidad;
        data["Nombre"] = this.nombre;
        data["Resolucion"] = this.resolucion;
        data["FechaHabilitacion"] = this.fechaHabilitacion ? this.fechaHabilitacion.toISOString() : <any>undefined;
        data["FechaDeshabilitacion"] = this.fechaDeshabilitacion ? this.fechaDeshabilitacion.toISOString() : <any>undefined;
        data["UsuarioCreacion"] = this.usuarioCreacion;
        data["FechaHoraCreacion"] = this.fechaHoraCreacion ? this.fechaHoraCreacion.toISOString() : <any>undefined;
        data["UsuarioActualizacion"] = this.usuarioActualizacion;
        data["FechaHoraActualizacion"] = this.fechaHoraActualizacion ? this.fechaHoraActualizacion.toISOString() : <any>undefined;
        data["Observacion"] = this.observacion;
        return data;
    }
}

export interface IEntidadAutorizadaResponse {
    tipoIdEntidad?: string | undefined;
    nroIdEntidad?: number;
    nombre?: string | undefined;
    resolucion?: string | undefined;
    fechaHabilitacion?: Date;
    fechaDeshabilitacion?: Date;
    usuarioCreacion?: string | undefined;
    fechaHoraCreacion?: Date;
    usuarioActualizacion?: string | undefined;
    fechaHoraActualizacion?: Date;
    observacion?: string | undefined;
}

export class Greetings_SayHi_Request implements IGreetings_SayHi_Request {
    name?: string | undefined;
    ageYears?: number;

    constructor(data?: IGreetings_SayHi_Request) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["Name"];
            this.ageYears = _data["AgeYears"];
        }
    }

    static fromJS(data: any): Greetings_SayHi_Request {
        data = typeof data === 'object' ? data : {};
        let result = new Greetings_SayHi_Request();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Name"] = this.name;
        data["AgeYears"] = this.ageYears;
        return data;
    }
}

export interface IGreetings_SayHi_Request {
    name?: string | undefined;
    ageYears?: number;
}

export class MesesCorteResponse implements IMesesCorteResponse {
    idMes?: string | undefined;
    nombreMes?: string | undefined;

    constructor(data?: IMesesCorteResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.idMes = _data["IdMes"];
            this.nombreMes = _data["NombreMes"];
        }
    }

    static fromJS(data: any): MesesCorteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MesesCorteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["IdMes"] = this.idMes;
        data["NombreMes"] = this.nombreMes;
        return data;
    }
}

export interface IMesesCorteResponse {
    idMes?: string | undefined;
    nombreMes?: string | undefined;
}

export class ReporteConsolidadoResponse implements IReporteConsolidadoResponse {
    nombreEntidad?: string | undefined;
    nitEntidad?: string | undefined;
    nAfiliadosR4?: number;
    nAfiliadosR2?: number;
    nAfiliadosSalud?: number;
    nAfiliadosPension?: number;
    nAfiliadosRiesgo?: number;
    certificadoRLegal?: number;
    valorSuficiencia?: number;
    valorReferencia?: number;
    observacionVRef?: string | undefined;
    totalRegistros?: number;

    constructor(data?: IReporteConsolidadoResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nombreEntidad = _data["NombreEntidad"];
            this.nitEntidad = _data["NitEntidad"];
            this.nAfiliadosR4 = _data["NAfiliadosR4"];
            this.nAfiliadosR2 = _data["NAfiliadosR2"];
            this.nAfiliadosSalud = _data["NAfiliadosSalud"];
            this.nAfiliadosPension = _data["NAfiliadosPension"];
            this.nAfiliadosRiesgo = _data["NAfiliadosRiesgo"];
            this.certificadoRLegal = _data["CertificadoRLegal"];
            this.valorSuficiencia = _data["ValorSuficiencia"];
            this.valorReferencia = _data["ValorReferencia"];
            this.observacionVRef = _data["ObservacionVRef"];
            this.totalRegistros = _data["TotalRegistros"];
        }
    }

    static fromJS(data: any): ReporteConsolidadoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReporteConsolidadoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["NombreEntidad"] = this.nombreEntidad;
        data["NitEntidad"] = this.nitEntidad;
        data["NAfiliadosR4"] = this.nAfiliadosR4;
        data["NAfiliadosR2"] = this.nAfiliadosR2;
        data["NAfiliadosSalud"] = this.nAfiliadosSalud;
        data["NAfiliadosPension"] = this.nAfiliadosPension;
        data["NAfiliadosRiesgo"] = this.nAfiliadosRiesgo;
        data["CertificadoRLegal"] = this.certificadoRLegal;
        data["ValorSuficiencia"] = this.valorSuficiencia;
        data["ValorReferencia"] = this.valorReferencia;
        data["ObservacionVRef"] = this.observacionVRef;
        data["TotalRegistros"] = this.totalRegistros;
        return data;
    }
}

export interface IReporteConsolidadoResponse {
    nombreEntidad?: string | undefined;
    nitEntidad?: string | undefined;
    nAfiliadosR4?: number;
    nAfiliadosR2?: number;
    nAfiliadosSalud?: number;
    nAfiliadosPension?: number;
    nAfiliadosRiesgo?: number;
    certificadoRLegal?: number;
    valorSuficiencia?: number;
    valorReferencia?: number;
    observacionVRef?: string | undefined;
    totalRegistros?: number;
}

export class ReporteDescargaResponse implements IReporteDescargaResponse {
    nombre?: string | undefined;
    extension?: string | undefined;
    mimetype?: string | undefined;
    archivo?: string | undefined;

    constructor(data?: IReporteDescargaResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nombre = _data["nombre"];
            this.extension = _data["extension"];
            this.mimetype = _data["mimetype"];
            this.archivo = _data["archivo"];
        }
    }

    static fromJS(data: any): ReporteDescargaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReporteDescargaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nombre"] = this.nombre;
        data["extension"] = this.extension;
        data["mimetype"] = this.mimetype;
        data["archivo"] = this.archivo;
        return data;
    }
}

export interface IReporteDescargaResponse {
    nombre?: string | undefined;
    extension?: string | undefined;
    mimetype?: string | undefined;
    archivo?: string | undefined;
}

export class ReporteIBCResumen1Response implements IReporteIBCResumen1Response {
    cantidad?: number;
    ibcAco?: number;
    aporteSalud?: number;
    reservaSalud?: number;
    totalReservaSalud?: number;
    aportePension?: number;
    reservaPension?: number;
    totalReservaPension?: number;
    aporteRiesgo?: number;
    reservaRiesgo?: number;
    totalReservaRiesgo?: number;
    totalReservaEspecial?: number;

    constructor(data?: IReporteIBCResumen1Response) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cantidad = _data["Cantidad"];
            this.ibcAco = _data["IbcAco"];
            this.aporteSalud = _data["AporteSalud"];
            this.reservaSalud = _data["ReservaSalud"];
            this.totalReservaSalud = _data["TotalReservaSalud"];
            this.aportePension = _data["AportePension"];
            this.reservaPension = _data["ReservaPension"];
            this.totalReservaPension = _data["TotalReservaPension"];
            this.aporteRiesgo = _data["AporteRiesgo"];
            this.reservaRiesgo = _data["ReservaRiesgo"];
            this.totalReservaRiesgo = _data["TotalReservaRiesgo"];
            this.totalReservaEspecial = _data["TotalReservaEspecial"];
        }
    }

    static fromJS(data: any): ReporteIBCResumen1Response {
        data = typeof data === 'object' ? data : {};
        let result = new ReporteIBCResumen1Response();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Cantidad"] = this.cantidad;
        data["IbcAco"] = this.ibcAco;
        data["AporteSalud"] = this.aporteSalud;
        data["ReservaSalud"] = this.reservaSalud;
        data["TotalReservaSalud"] = this.totalReservaSalud;
        data["AportePension"] = this.aportePension;
        data["ReservaPension"] = this.reservaPension;
        data["TotalReservaPension"] = this.totalReservaPension;
        data["AporteRiesgo"] = this.aporteRiesgo;
        data["ReservaRiesgo"] = this.reservaRiesgo;
        data["TotalReservaRiesgo"] = this.totalReservaRiesgo;
        data["TotalReservaEspecial"] = this.totalReservaEspecial;
        return data;
    }
}

export interface IReporteIBCResumen1Response {
    cantidad?: number;
    ibcAco?: number;
    aporteSalud?: number;
    reservaSalud?: number;
    totalReservaSalud?: number;
    aportePension?: number;
    reservaPension?: number;
    totalReservaPension?: number;
    aporteRiesgo?: number;
    reservaRiesgo?: number;
    totalReservaRiesgo?: number;
    totalReservaEspecial?: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}